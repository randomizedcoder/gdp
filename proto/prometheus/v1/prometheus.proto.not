//
// prometheus.proto
//

//---------------------------------------------------
//
// This protobuf allows collecting of data from go programs that
// have prometheus counters and histrograms described
//
// Please note the key idea is to constrain the label entropy, so
// we have exactly x3 labels per metric
//
// The go programs have the promethus counters implmented like this:

// startTime := time.Now()
// defer func() {
//   d.pH.WithLabelValues("Deserialize", "complete", "count").Observe(time.Since(startTime).Seconds())
// }()
// d.pC.WithLabelValues("Deserialize", "start", "count").Inc()

// Error counters
// d.pC.WithLabelValues("Deserialize", "netlinkerDoneCh", "error").Inc()

// x.pC = promauto.NewCounterVec(
//   prometheus.CounterOpts{
//     Subsystem: "xtcp",
//     Name:      "counts",
//     Help:      "xtcp counts",
//   },
//   []string{"function", "variable", "type"},
// )

// x.pH = promauto.NewSummaryVec(
//   prometheus.SummaryOpts{
//     Subsystem: "xtcp",
//     Name:      "histograms",
//     Help:      "xtcp historgrams",
//     Objectives: map[float64]float64{
//       0.1:  quantileError,
//       0.5:  quantileError,
//       0.99: quantileError,
//     },
//     MaxAge: summaryVecMaxAge,
//   },
//   []string{"function", "variable", "type"},
// )
//---------------------------------------------------

syntax = "proto3";

package prometheus.v1;

// https://developers.google.com/protocol-buffers/docs/reference/go-generated
option go_package = "./pkg/prometheus";

message PromRecordCounter {

	double timestamp_ns                             = 10;

	string hostname                                 = 20;

	string pop                                      = 30;

	string label                                    = 50; // free form string

	string tag                                      = 60; // free form string

	uint64 poll_counter                             = 70;

	uint64 record_counter                           = 80;

	string function                                 = 90; // []string{"function", "variable", "type"},

	string variable                                 = 100;

	string type                                     = 110;

	double value                                    = 120;

};

// message PromRecord {

// 	double timestamp_ns                             = 10;

// 	string hostname                                 = 20;

// 	string pop                                      = 30;

// 	string label                                    = 50; // free form string

// 	string tag                                      = 60; // free form string

// 	uint64 record_counter                           = 70;

// 	string function                                 = 80; // []string{"function", "variable", "type"},

// 	string variable                                 = 90;

// 	string type                                     = 100;

// 	double value                                    = 110;

// 	float quantile_objective_low                    = 120; // objectives are like 0.1, 0.5. 0.9

// 	float quantile_objective_medium                 = 130;

// 	float quantile_objective_high                   = 140;

// 	double quantile_low                             = 150;

// 	double quantile_medium                          = 160;

// 	double quantile_high                            = 170;
// };

// message PromRecordQuantile {

// 	double timestamp_ns                             = 10;

// 	string hostname                                 = 20;

// 	string pop                                      = 30;

// 	string label                                    = 50; // free form string

// 	string tag                                      = 60; // free form string

// 	string function                                 = 80; // []string{"function", "variable", "type"},

// 	string variable                                 = 90;

// 	string type                                     = 100;

// 	float quantile_objective_low                    = 110; // objectives are like 0.1, 0.5. 0.9

// 	float quantile_objective_medium                 = 120;

// 	float quantile_objective_high                   = 130;

// 	double quantile_low                             = 140;

// 	double quantile_medium                          = 150;

// 	double quantile_high                            = 160;

// };

// end
